Junior Developer Test - Todo Application (Laravel
+ Vue.js + MySQL)

Objective
Build a Todo Application using Laravel (API backend), Vue.js (frontend SPA), and MySQL.
Use Single Action Classes (e.g., UserCreateAction, TodoUpdateAction) for all business logic,
keeping controllers minimal and adhering to OOP best practices.
Requirements
1. Features
- User Authentication
- Users can register and log in (Laravel Sanctum preferred).
- Todo Management
- CRUD operations: Create, Read, Update, Delete.
- Each todo should include:
- title (string, required)
- description (text, optional)
- status (enum: pending, in-progress, completed)
- due_date (nullable)
- Todos should only be accessible to their creator.
Backend (Laravel)
Use Laravel 10+.
Build a RESTful API.
Single Action Classes:
class UserCreateAction {
public function execute(array $data): User {
// validation, creation logic
}
}
class TodoUpdateAction {
public function execute(Todo $todo, array $data): Todo {
// update logic
}
}
public function store(Request $request) {
$todo = (new TodoCreateAction())->execute($request->validated());
return response()->json($todo, 201);
}

Validation
Validation using Form Requests.
Database Design: Migrations, foreign key constraints (user_id -> users).
Error Handling: proper HTTP codes (422, 401, 404).

Frontend (Vue.js)
Vue 3, with Vue Router and Axios.
Pages:
- Login & Registration
- Dashboard: list todos, mark as complete, delete
- Todo Form: create & edit todos
Component-Based Design:
- Examples: TodoList.vue, TodoItem.vue, TodoForm.vue
API errors should be handled gracefully (validation errors, network issues).
Database (MySQL)
Tables:
- users -> authentication
- todos -> linked via user_id
Proper indexes and foreign key constraints.
Best Practices
Follow PSR-12 coding standards.
Use OOP principles:
- Single Responsibility: each Action handles one task
- Separation of Concerns: controllers delegate to Actions
Use Eloquent relationships (User hasMany Todos)
Clean folder structure:
app/
Actions/
UserCreateAction.php
TodoCreateAction.php
TodoUpdateAction.php
Http/
Controllers/
Models/
resources/
js/
components/
views/
Git: frequent commits with clear messages.
Provide a README with setup instructions.
Bonus
Search/filter todos by status or due date.
Pagination.
Unit tests (PHPUnit for backend, Vitest for Vue.js).
Docker environment setup.

Deliverables
GitHub repo with code.
README with:
- Setup instructions
- Migration & seeding commands
- How to run app locally.